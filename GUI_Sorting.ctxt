#BlueJ class context
comment0.params=a\ i\ j
comment0.target=void\ swap(int[],\ int,\ int)
comment0.text=\r\n\ Swaps\ a[i]\ and\ a[j].\r\n
comment1.params=a
comment1.target=void\ reload(int[])
comment1.text=\r\n\ Fills\ an\ array\ with\ random\ values\ between\ 0\ and\ MAX_VALUE.\r\n
comment10.params=a\ lo\ hi\ value
comment10.target=void\ mergeSort(int[],\ int,\ int,\ int[])
comment11.params=a
comment11.target=void\ countingSort(int[])
comment11.text=\r\n\ Sorts\ an\ array\ using\ counting\ sort,\ provided\ all\ values\ in\ the\r\n\ array\ are\ non-negative.\ \ If\ there\ are\ negative\ values\ in\ the\ array,\r\n\ the\ method\ will\ not\ sort\ but\ rather\ leave\ the\ array\ undefined.\r\n\ Furthermore,\ the\ method\ will\ likely\ throw\ an\ OutOfMemoryError\r\n\ if\ there\ are\ large\ integers\ in\ the\ array.\r\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment13.params=e
comment13.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment14.params=
comment14.target=void\ run()
comment15.params=e
comment15.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment16.params=
comment16.target=GUI_Sorting()
comment17.params=g
comment17.target=void\ paintComponent(java.awt.Graphics)
comment18.params=
comment18.target=void\ runAnimation()
comment18.text=\r\n\ Causes\ the\ screen\ to\ be\ repainted\ every\ 20\ ms\ or\ so.\r\n
comment19.params=
comment19.target=void\ PAUSE()
comment19.text=\r\n\ Something\ to\ call\ periodically\ during\ sorting.\r\n
comment2.params=a
comment2.target=void\ selectionSort(int[])
comment2.text=\r\n\ Sorts\ an\ array\ using\ Selection\ Sort.\ \ The\ algorithm\ is\ to\ first\r\n\ put\ the\ itemest\ item\ in\ the\ first\ position,\ then\ the\ next\r\n\ itemest\ in\ the\ second\ position,\ and\ so\ on.\r\n
comment3.params=a
comment3.target=void\ insertionSort(int[])
comment3.text=\r\n\ Sorts\ an\ array\ using\ Insertion\ Sort.\ \ The\ algorithm\ is\ to\ first\r\n\ slide\ the\ second\ element\ back\ as\ far\ as\ it\ should\ go,\ then\ slide\r\n\ the\ third\ back,\ and\ so\ on.\r\n
comment4.params=a
comment4.target=void\ bubbleSort(int[])
comment4.text=\r\n\ Sorts\ an\ array\ using\ Bubble\ Sort.\r\n
comment5.params=a
comment5.target=void\ shellSort(int[])
comment5.text=\r\n\ Sorts\ an\ array\ using\ Shell\ Sort.\ \ This\ is\ a\ lousy\ Shell\ Sort.\r\n\ \r\n
comment6.params=a
comment6.target=void\ quickSort(int[])
comment6.text=\r\n\ Sorts\ an\ array\ using\ Quick\ Sort.\ \ This\ version\ of\ quicksort\ uses\r\n\ the\ leftmost\ item\ as\ the\ pivot,\ but\ since\ this\ gives\ disastrous\r\n\ performance\ on\ sorted\ and\ nearly\ sorted\ arrays,\ we\ scramble\ the\r\n\ array\ first.\r\n
comment7.params=a\ left\ right
comment7.target=void\ quickSort(int[],\ int,\ int)
comment8.params=a
comment8.target=void\ heapSort(int[])
comment8.text=\r\n\ Sorts\ an\ array\ using\ Heap\ Sort.\r\n
comment9.params=a
comment9.target=void\ mergeSort(int[])
comment9.text=\r\n\ Sorts\ an\ array\ using\ merge\ sort.\r\n\ \r\n
numComments=20
